@page "/"
@using System.Net.Http
@using System.Text
@using System.Text.Json
@using MedProgramari.Common.DTO
@using ProgramariMedicale.Common.DTO
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="chat-container">
    <div class="chat-header">
        <h3>Asistent Medical Virtual</h3>
        <p>Descrieți simptomele și vă vom recomanda instituțiile potrivite</p>
    </div>

    <div class="chat-messages" id="messageContainer">
        <!-- Mesajele vor fi afișate aici -->
        @foreach (var message in messages)
        {
            <div class="message @(message.IsFromUser ? "user-message" : "ai-message")">
                <div class="message-avatar">
                    @if (message.IsFromUser)
                    {
                        <i class="oi oi-person"></i>
                    }
                    else
                    {
                        <img src="\536c1520e31c2bc39f1e802acb0dc510.jpg" alt="Medical Cross" style="width: 50px; height: 50px; border-radius: 50%;"   />
                    }
                </div>
                <div class="message-content">
                    <div class="message-sender">@(message.IsFromUser ? "Dvs." : "Asistent Medical")</div>
                    <div class="message-text">@((MarkupString)message.Content)</div>
                    <div class="message-time">@message.Timestamp.ToString("HH:mm")</div>
                </div>
            </div>
        }

        @if (isLoading)
        {
            <div class="message ai-message">
                <div class="message-avatar">
                    <img src="\536c1520e31c2bc39f1e802acb0dc510.jpg" alt="Medical Cross" style="width: 50px; height: 50px; border-radius: 50%;"   />
                </div>
                <div class="message-content">
                    <div class="message-sender">Asistent Medical</div>
                    <div class="message-text">
                        <div class="loading-indicator">
                            <div class="dot"></div>
                            <div class="dot"></div>
                            <div class="dot"></div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="chat-input">
        <textarea
            @bind="userInput"
            @bind:event="oninput"
            @onkeydown="HandleKeyPress"
            placeholder="Descrieți simptomele dvs. sau problemele medicale..."
            disabled="@isLoading"
            rows="2"></textarea>
        <button @onclick="SendMessage" disabled="@(string.IsNullOrWhiteSpace(userInput) || isLoading)">
            <i class="oi oi-arrow-right"></i>
        </button>
    </div>
</div>



@code {
    private string userInput = "";
    private List<ChatMessage> messages = new List<ChatMessage>();
    private bool isLoading = false;
    private string serverUrl = "http://localhost:5227/asistent-medical"; // Se va înlocui cu URL-ul real al API-ului
    private DtoPacient pacient;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Mesaj de bun venit
            messages.Add(new ChatMessage
            {
                Content = "Bună ziua! Sunt asistentul medical virtual. Vă pot ajuta să găsiți instituția medicală potrivită pentru problema dvs. Vă rog să descrieți simptomele sau problemele medicale.",
                IsFromUser = false,
                Timestamp = DateTime.Now
            });
            pacient = new DtoPacient()
            {
                IDNP = "324932413412312",
                FullName = "Ion Popescu",
                Phone = "068765432",
                Age = 23,
                Address = "Str Studentilor 7/1",
                Email = "Ion.popescu@gmai.com",
                Gender = "Masculin",
            };

            StateHasChanged();
            await ScrollToBottom();
        }
        else if (messages.Count > 0)
        {
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "messageContainer");
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !string.IsNullOrWhiteSpace(userInput) && !isLoading)
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || isLoading)
            return;

        // Adaugă mesajul utilizatorului
        var userMessage = new ChatMessage
        {
            Content = userInput.Trim(),
            IsFromUser = true,
            Timestamp = DateTime.Now
        };
        messages.Add(userMessage);

        // Șterge input-ul și actualizează UI-ul
        string userQuery = userInput;
        userInput = "";
        isLoading = true;
        StateHasChanged();
        await ScrollToBottom();

        try
        {
            // Trimite cererea către server și așteaptă răspunsul
            string serverResponse = await GetServerResponse(userQuery);

            // Adaugă răspunsul AI
            messages.Add(new ChatMessage
            {
                Content = serverResponse,
                IsFromUser = false,
                Timestamp = DateTime.Now
            });
        }
        catch (Exception ex)
        {
            // Gestionare erori
            messages.Add(new ChatMessage
            {
                Content = $"Ne pare rău, a apărut o eroare în timpul procesării cererii dvs. Vă rugăm să încercați din nou mai târziu. Detalii: {ex.Message}",
                IsFromUser = false,
                Timestamp = DateTime.Now
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    // Metoda pentru trimiterea cererii către server și primirea răspunsului
    private async Task<string> GetServerResponse(string userQuery)
    {
        try
        {
            // Pregătirea datelor pentru cererea POST
            var requestData = new MedicalRequestAsistentDto
            {
                UserMessage = userQuery,
                DtoPacient = pacient,
                Messages= messages
            };

            var content = new StringContent(
                JsonSerializer.Serialize(requestData),
                Encoding.UTF8,
                "application/json"
            );

            // Trimiterea cererii POST către server
            var response = await Http.PostAsync(serverUrl, content);
            Console.WriteLine(response.IsSuccessStatusCode);
            // Verificarea statusului răspunsului
            if (response.IsSuccessStatusCode)
            {
                // Citirea și returnarea răspunsului JSON
                var jsonResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine(jsonResponse);

                // Console.WriteLine(responseObj);
                return jsonResponse;

            }
            else
            {
                // Tratarea erorilor de server
                return $"Eroare de comunicare cu serverul: {response.StatusCode}. Vă rugăm să încercați din nou mai târziu.";
            }
        }
        catch (HttpRequestException ex)
        {
            // Tratarea erorilor de rețea
            return "Nu s-a putut stabili o conexiune cu serverul. Verificați conexiunea la internet și încercați din nou.";
        }
        catch (Exception ex)
        {
            // Tratarea altor tipuri de erori
            return "A apărut o eroare neașteptată. Vă rugăm să încercați din nou mai târziu.";
        }
    }

    // Clasă pentru structura răspunsului serverului
    private class ServerResponse
    {
        public string Response { get; set; }
        public List<Institution> RecommendedInstitutions { get; set; }
    }

    private class Institution
    {
        public string Name { get; set; }
        public string Department { get; set; }
        public string Address { get; set; }
        public string Phone { get; set; }
    }



    // JavaScript pentru scroll
    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("eval", @"
            window.scrollToBottom = function(elementId) {
                var element = document.getElementById(elementId);
                if (element) {
                    element.scrollTop = element.scrollHeight;
                }
            }
        ");
    }
}