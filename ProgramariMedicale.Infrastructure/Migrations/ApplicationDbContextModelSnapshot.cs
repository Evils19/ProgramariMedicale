// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProgramariMedicale.Infrastructure;

#nullable disable

namespace ProgramariMedicale.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedProgramari.Domain.Data.Departamente", b =>
                {
                    b.Property<string>("Id_departament")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id_MedInstitutie")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nume_departament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sepecializare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_departament");

                    b.HasIndex("Id_MedInstitutie");

                    b.ToTable("Departamente");
                });

            modelBuilder.Entity("MedProgramari.Domain.Data.MedIndtitut", b =>
                {
                    b.Property<string>("Id_Institutie")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Denumire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Institutie");

                    b.ToTable("InstitutiiPublice");
                });

            modelBuilder.Entity("MedProgramari.Domain.Data.Medic", b =>
                {
                    b.Property<string>("IDNP")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartamenteId_departament")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("TimpConsultatie")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkStart")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkdayEnd")
                        .HasColumnType("time");

                    b.Property<string>("id_departament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("id_instittutie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specializare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDNP");

                    b.HasIndex("DepartamenteId_departament");

                    b.ToTable("Medic");
                });

            modelBuilder.Entity("MedProgramari.Domain.Data.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fc73f89-95f8-4507-869f-8564a09fe953"),
                            Name = "Pacient"
                        },
                        new
                        {
                            Id = new Guid("35f3d3f9-f8cd-4ea3-af04-ac45bfe24fb5"),
                            Name = "Oaspete"
                        });
                });

            modelBuilder.Entity("MedProgramari.Domain.Data.UserRole", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdUser", "IdRole");

                    b.HasIndex("IdRole");

                    b.ToTable("PacientRoles");
                });

            modelBuilder.Entity("MedProgramari.Infrastructure.Data.ProgramariPaciet", b =>
                {
                    b.Property<string>("Idnp_Pacient")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Idnp_Med")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("Idnp_Pacient", "Idnp_Med");

                    b.HasIndex("Idnp_Med");

                    b.ToTable("Programari");
                });

            modelBuilder.Entity("ProgramariMedicale.Domain.Entity.Pacient", b =>
                {
                    b.Property<string>("IDNP")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Info")
                        .HasColumnType("int");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDNP");

                    b.ToTable("Pacienti");
                });

            modelBuilder.Entity("MedProgramari.Domain.Data.Departamente", b =>
                {
                    b.HasOne("MedProgramari.Domain.Data.MedIndtitut", "InstitutiePublica")
                        .WithMany("Departament")
                        .HasForeignKey("Id_MedInstitutie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstitutiePublica");
                });

            modelBuilder.Entity("MedProgramari.Domain.Data.Medic", b =>
                {
                    b.HasOne("MedProgramari.Domain.Data.Departamente", null)
                        .WithMany("Medici")
                        .HasForeignKey("DepartamenteId_departament");
                });

            modelBuilder.Entity("MedProgramari.Domain.Data.UserRole", b =>
                {
                    b.HasOne("MedProgramari.Domain.Data.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProgramariMedicale.Domain.Entity.Pacient", "Pacient")
                        .WithMany("UserRoles")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacient");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MedProgramari.Infrastructure.Data.ProgramariPaciet", b =>
                {
                    b.HasOne("MedProgramari.Domain.Data.Medic", "Medic")
                        .WithMany()
                        .HasForeignKey("Idnp_Med")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProgramariMedicale.Domain.Entity.Pacient", "Pacient")
                        .WithMany()
                        .HasForeignKey("Idnp_Pacient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medic");

                    b.Navigation("Pacient");
                });

            modelBuilder.Entity("MedProgramari.Domain.Data.Departamente", b =>
                {
                    b.Navigation("Medici");
                });

            modelBuilder.Entity("MedProgramari.Domain.Data.MedIndtitut", b =>
                {
                    b.Navigation("Departament");
                });

            modelBuilder.Entity("MedProgramari.Domain.Data.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProgramariMedicale.Domain.Entity.Pacient", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
